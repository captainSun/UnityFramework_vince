---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sunshuo.
--- DateTime: 2020/12/18 17:34
---
local RemainTime = require("Data.RemainTime")
local UPDATE_TIME = 300
local prefab = "Prefabs/Guide/GuideMask.prefab"
---@class Guide.View.GuideArrowMaskView:View
---@field New fun():Guide.View.GuideArrowMaskView
local GuideArrowMaskView = class("Guide.View.GuideArrowMaskView", View)
function GuideArrowMaskView:Ctor()
    GuideArrowMaskView.super.Ctor(self, prefab, Constants.LAYER_GUIDE)

    local canvasScale = math.ceil(GetComponent.CanvasScaler(Stage.uiCanvas.gameObject).referenceResolution.x / Screen.width)
    self.width = canvasScale * Screen.width
    self.height = canvasScale * Screen.height
end

function GuideArrowMaskView:OnInitialize()
    GuideArrowMaskView.super.OnInitialize(self)
    Stage.AddDontDestroy(self.gameObject)

    self.touchModal = self.transform:Find("touchModal").gameObject
    self.t_top = self.touchModal.transform:Find("top").gameObject
    self.t_left = self.touchModal.transform:Find("left").gameObject
    self.t_right = self.touchModal.transform:Find("right").gameObject
    self.t_bottom = self.touchModal.transform:Find("bottom").gameObject

    self.effect = self.transform:Find("effect").gameObject
    self.e_top = self.effect.transform:Find("top").gameObject
    self.e_left = self.effect.transform:Find("left").gameObject
    self.e_right = self.effect.transform:Find("right").gameObject
    self.e_bottom = self.effect.transform:Find("bottom").gameObject
    self:RestEffectSize()
    self.remainTime = RemainTime.New()
    self:Hide()
end

function GuideArrowMaskView:OnDestroy()
    GuideArrowMaskView.super.OnDestroy(self)
end


---@param target UnityEngine.GameObject
---@param modelOffSet Vector3
function GuideArrowMaskView:ShowModal(target, modelOffSet, size, noTouch)
    self:Show()

    modelOffSet = not modelOffSet and Vector3.zero or modelOffSet
    if target ~= nil and not isnull(target) and not isnull(target.gameObject:GetComponent("RectTransform")) then
        local v1 = target.transform:TransformPoint(Vector3.zero + modelOffSet)
        self.targetPos = self.transform.parent:InverseTransformPoint(v1)
        self.targetSize = target:GetComponent("RectTransform").sizeDelta
    else
        local v1 = Camera.main:WorldToScreenPoint(target.transform.position + modelOffSet)
        self.targetPos = Vector3.New(v1.x - self.width/2,v1.y - self.height/2,v1.z)
        --self.targetSize = Vector2.New(target.transform:Find("Avatar").gameObject:GetComponent(typeof(UnityEngine.BoxCollider)).bounds.size.x,target.transform:Find("Avatar").gameObject:GetComponent(typeof(UnityEngine.BoxCollider)).bounds.size.y)
        self.targetSize = size == nil and Vector2.New(100,100) or size
    end
    --print(self.targetPos.x.." "..self.targetPos.y.." "..self.targetPos.z, "POS")

    self.t_top:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width,self.height / 2 - self.targetPos.y - self.targetSize.y/2)
    self.t_top.transform.localPosition = Vector3.New(0,self.height/2,0 )

    self.t_bottom:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width,self.height / 2 + self.targetPos.y - self.targetSize.y/2)
    self.t_bottom.transform.localPosition = Vector3.New(0,-self.height/2,0 )

    self.t_left:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width / 2 + self.targetPos.x - self.targetSize.x/2 , self.targetSize.y )
    self.t_left.transform.localPosition = Vector3.New(-self.width/2,self.targetPos.y,0)

    self.t_right:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width / 2 - self.targetPos.x - self.targetSize.x/2 , self.targetSize.y )
    self.t_right.transform.localPosition = Vector3.New(self.width/2,self.targetPos.y,0)

    GetComponent.Image(self.t_top).raycastTarget = not noTouch
    GetComponent.Image(self.t_bottom).raycastTarget = not noTouch
    GetComponent.Image(self.t_left).raycastTarget = not noTouch
    GetComponent.Image(self.t_right).raycastTarget = not noTouch
    if noTouch ~= true then
        AddEventListener(self.touchModal.gameObject,PointerEvent.CLICK,self.TouchModal,self)
    end

end

function GuideArrowMaskView:HideModal()
    self:RestEffectSize()
    if self.delayHandle then
        CancelDelayedCall(self.delayHandle)
        self.delayHandle = nil
    end
    RemoveEventListener(self.touchModal.gameObject,PointerEvent.CLICK,self.TouchModal,self)
    RemoveEventListener(Stage,Event.UPDATE,self.Update,self)
    self:Hide()
end

function GuideArrowMaskView:ShowEffModal(type)
    self.effect:SetActive(type)
end
function GuideArrowMaskView:TouchModal()
    AddEventListener(Stage,Event.UPDATE,self.Update,self)
    if self.delayHandle then
        CancelDelayedCall(self.delayHandle)
        self.delayHandle = nil
    end
    if self.remainTime:GetTime() < 250 then
        self.remainTime:SetTime(UPDATE_TIME)
    end
end

function GuideArrowMaskView:Update()
    if self.remainTime:GetTime() <= 0 then
        self.delayHandle = DelayedCall(0.2,function()
            self:RestEffectSize()
        end)
        RemoveEventListener(Stage,Event.UPDATE,self.Update,self)
    end
    local scale = (UPDATE_TIME - self.remainTime:GetTime()) / UPDATE_TIME
    local th = (self.height / 2 - self.targetPos.y - self.targetSize.y/2) * scale
    self.e_top:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width,th)
    self.e_top.transform.localPosition = Vector3.New(0,self.height/2,0 )

    local bh = (self.height / 2 + self.targetPos.y - self.targetSize.y/2) * scale
    self.e_bottom:GetComponent("RectTransform").sizeDelta = Vector2.New(self.width,bh)
    self.e_bottom.transform.localPosition = Vector3.New(0,-self.height/2,0 )

    local left_height =  self.height - self.e_top:GetComponent("RectTransform").sizeDelta.y - self.e_bottom:GetComponent("RectTransform").sizeDelta.y
    local y = ((self.height/2 - th) + (-self.height/2 + bh )) / 2

    self.e_left:GetComponent("RectTransform").sizeDelta = Vector2.New((self.width / 2 + self.targetPos.x - self.targetSize.x/2) * scale ,
            left_height)
    self.e_left.transform.localPosition = Vector3.New(-self.width/2,y ,0)

    self.e_right:GetComponent("RectTransform").sizeDelta = Vector2.New((self.width / 2 - self.targetPos.x - self.targetSize.x/2) * scale ,
            left_height)
    self.e_right.transform.localPosition = Vector3.New(self.width/2,y ,0)
end

function GuideArrowMaskView:RestEffectSize()
    self.e_top:GetComponent("RectTransform").sizeDelta = Vector3.zero
    self.e_bottom:GetComponent("RectTransform").sizeDelta = Vector3.zero
    self.e_left:GetComponent("RectTransform").sizeDelta = Vector3.zero
    self.e_right:GetComponent("RectTransform").sizeDelta = Vector3.zero
end

return GuideArrowMaskView