---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by taobw.
--- DateTime: 2020/10/20 14:28
---
---@class Guide.Action.GuideWait:Guide.Action.BaseGuideAction
---@field actionVo Guide.ActionData.GuideWaitVo
local GuideWait = class("Guide.Action.GuideWait", BaseGuideAction)
local fuseTime = 30 ---熔断时间 超过此时间则熔断

function GuideWait:Ctor()
    GuideWait.super.Ctor(self)
end

function GuideWait:Execute()
    log("GuideWait: 开始等待")
    GuideWait.super.Execute(self)
    if self.actionVo == nil then
        return
    end

    if self.actionVo.modal then
        self.modal = true
        GuideController.GuideShowModal()
    end

    AddEventListener(GuideData, GuideEvent.GUIDE_CONTINUE , self.ContinueGuide, self)
    if self.actionVo.fuseFlag == nil or self.actionVo.fuseFlag == false then
        GuideData.DebugWarningLog(GuideData.WAIT_NO_FUSE_NOTICE)
    else
        self.delay = DelayedCall(self.actionVo.fuseTime or fuseTime, function()
            GuideData.DebugWarningLog(GuideData.ACTION_WAIT_ERROR)
            self:ActionEnd()
        end)
    end
end

function GuideWait:ContinueGuide(event)
    if event.data ~= nil and self.actionVo ~= nil then
        log(string.format("GuideWait : ContinueGuide: I have received the event message. event key : %s  self key : %s"
        , event.data.key, self.actionVo.key))
    end

    event.data = event.data or {}
    print("GuideWait:ContinueGuide", self.actionVo.key, event.data.key)
    if self.actionVo.key and self.actionVo.key ~= event.data.key then
        return
    end
    --print("GuideWait:ContinueGuide", debug.traceback())
    log("GuideWait : ContinueGuide 结束等待")
    self:ActionEnd()
end

function GuideWait:Dispose()
    log("GuideWait : Dispose: I have been executed")
    GuideWait.super.Dispose(self)
    RemoveEventListener(GuideData, GuideEvent.GUIDE_CONTINUE, self.ContinueGuide, self)
    if self.delay ~= nil then
        CancelDelayedCall(self.delay)
        self.delay = nil
    end
    if self.modal then
        GuideController.GuideHideModal(self.actionVo.resumeMerge)
    end
    self.modal = nil
end

--function GuideWait:SkipCallback()
--    GuideWait.super.SkipCallback(self)
--    self:Dispose()
--end

return GuideWait

---@class Guide.ActionData.GuideWaitVo
---@field fuseTime number  更改熔断时间
---@field modal boolean 是否需要模态
---@field key string 指定waitkey
---@field fuseFlag boolean 是否需要熔断 默认为false
---@field resumeMerge boolean 是否恢复合成