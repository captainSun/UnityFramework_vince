---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sunshuo.
--- DateTime: 2020/12/18 17:34
--- 引导命令：指向点击箭头
local GuideArrowMaskView = require("Module.Guide.View.GuideArrowMaskView")
local ConvertUtil = require("Module.Common.Utils.ConvertUtil")

---@class Guide.Action.GuideArrow:Guide.Action.BaseGuideAction
---@field actionVo Guide.ActionData.GuideArrowVo
local GuideArrow = class("Guide.Action.GuideArrow", BaseGuideAction)
function GuideArrow:Ctor()
    GuideArrow.super.Ctor(self)
end

GuideArrow.arrow = nil ---@type UnityEngine.GameObject 箭头
GuideArrow.arrowMaskView = nil ---@type Guide.View.GuideArrowMaskView 箭头遮罩

function GuideArrow:Execute()
    GuideArrow.super.Execute(self)

    if self.actionVo == nil then
        return
    end

    self.target = GuideController.GetTarget(self.actionVo.target)

    if isnull(self.target) then
        --没有找到target 等待target设置完成
        AddEventListener(GuideData, GuideEvent.INIT_TARGET_EVENT, self.InitTarget, self)
        self.delay = DelayedCall(self.actionVo.waitTime or 5, function()
            logWarning("GuideArrow 没有监听到目标设置完成事件 " .. tostring(self.actionVo.target))
            self.delay = nil
            self:ActionEnd()
        end)
        return
    end

    if GuideArrow.arrow == nil or isnull(GuideArrow.arrow) then
        GuideArrow.arrowMaskView = GuideArrowMaskView.New()
        GuideArrow.arrow = Instantiate("Prefabs/Guide/GuideArrow.prefab", Constants.LAYER_GUIDE, Constants.ASSET_GROUP_CORE)
        Stage.AddDontDestroy(self.arrow)
        GuideArrow.arrow.transform:Find("holdTouch").gameObject:SetActive(false)
        GuideArrow.arrow.transform:Find("arrow").gameObject:SetActive(true)
    end
    local arrow = GuideArrow.arrow

    self.rect = GetComponent.RectTransform(self.target.gameObject)
    self:CheckArrowPos()
    local rotationZ = self.actionVo.rotationZ --旋转角度
    if rotationZ then
        arrow.transform.localEulerAngles = Vector3.New(0,0,rotationZ)
    else
        arrow.transform.localEulerAngles = Vector3.zero
    end

    arrow:SetActive(true)
    GuideArrow.arrowMaskView:ShowEffModal(true)

    if self.actionVo.noArrow then
        arrow:SetActive(false)
        GuideArrow.arrowMaskView:ShowEffModal(false)
    end
    --CameraMovement.Movement(false)
    --关闭屏幕拖动
    CameraMovement.SetComponent(false)

    AddEventListener(self.target, PointerEvent.CLICK, self.ConfirmClick, self)
end

---设置箭头位置
function GuideArrow:SetArrowPosition()
    --print("GuideArrow:SetArrowPosition")
    if not isnull(self.rect) then
        --target是2D物体
        self.is2D = true
        local v1 = self.target.transform:TransformPoint(Vector3.zero)
        GuideArrow.arrow.transform.localPosition = GuideArrow.arrow.transform.parent:InverseTransformPoint(v1)
    else
        --target是3D物体
        self.is2D = false
        local pos = ConvertUtil.WorldToCanvasPoint(self.target.transform.position,Camera.main,Camera.main.transform)
        GuideArrow.arrow.transform.localPosition = pos
    end

    local offset = self.actionVo.offset --偏移位置
    if offset then
        GuideArrow.arrow.transform.localPosition = GuideArrow.arrow.transform.localPosition + offset
    else
        if self.is2D then
            --若是2D物体 没配置偏移则自动计算偏移位置
            local resultY = self.rect.rect.height * self.rect.pivot.y --计算y值偏移
            GuideArrow.arrow.transform.localPosition = GuideArrow.arrow.transform.localPosition + Vector3.New(0,resultY,0)
        end
    end
    if self.actionVo.model == nil or self.actionVo.model == true then
        --CameraMovement.Movement(false)
        --关闭屏幕拖动
        GuideArrow.arrowMaskView:ShowModal(self.target, self.actionVo.modelOffSet, self.actionVo.size)
    end
end

function GuideArrow:InitTarget(event)
    if self.actionVo == nil then
        return
    end
    if self.delay then
        CancelDelayedCall(self.delay)
        self.delay = nil
    end
    if event.data == self.actionVo.target then
        RemoveEventListener(GuideData, GuideEvent.INIT_TARGET_EVENT, self.InitTarget, self)
        self:Execute()
    end
end

function GuideArrow:ConfirmClick(event)
    if self.actionVo == nil then
        return
    end
    if self.actionVo.noArrow then
        GuideArrow.arrow:SetActive(true)
        GuideArrow.arrowMaskView:ShowEffModal(true)
    end
    if GuideArrow.arrow and self.actionVo.target and event.data.pointerPress.name == self.target.name then
        self.actionVo = nil
        CameraMovement.SetComponent(true)
        --接收到点击事件 命令结束
        self:ActionEnd()
    end
end

function GuideArrow:CheckArrowPos()
    if isnull(self.target) or self.actionVo == nil then
        return
    end
    self:SetArrowPosition()
    DelayedCall(0.5, self.CheckArrowPos, self)
end

function GuideArrow:Dispose()
    GuideArrow.super.Dispose(self)
    --CameraMovement.Movement(true)
    if GuideArrow.arrow then
        GuideArrow.arrow:SetActive(false)
    end
    if GuideArrow.arrowMaskView then
        GuideArrow.arrowMaskView:HideModal()
    end
    if self.delay then
        CancelDelayedCall(self.delay)
        self.delay = nil
    end
    if self.updateCall then
        CancelDelayedCall(self.updateCall)
        self.updateCall = nil
    end
    if self.target then
        RemoveEventListener(self.target, PointerEvent.CLICK, self.ConfirmClick, self)
    end
    RemoveEventListener(GuideData, GuideEvent.INIT_TARGET_EVENT, self.InitTarget, self)
end

return GuideArrow

---@class Guide.ActionData.GuideArrowVo
---@field target string 引导对象
---@field offset Vector3 偏移位置 若是2D物体 不配置则自动计算偏移位置
---@field isUpdate boolean 是否需要位置更新
---@field waitTime number 等待箭头初始化时间