---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sunshuo.
--- DateTime: 2023/9/7 14:19
--- 常用工具函数
local Utils = {}

---使用DOTween对浮点数进行缓动
---@param startValue number 初值
---@param endValue number 目标值
---@param duration number 时间
---@param setFloatFun function 每次变化的回调函数
---@param callBack function 完成时的回调函数
---@param ease DG.Tweening.Ease 运动曲线
---@return DG.Tweening.DOTween 返回DOTween
function Utils.DOTweenFloat(startValue, endValue, duration, setFloatFun, callBack, ease)
    local value = startValue
    local function getFunc()
        return value
    end
    local function setFunc(floatValue)
        setFloatFun(floatValue)
        value = floatValue
    end
    local getter = DG.Tweening.Core.DOGetter_float(getFunc)
    local setter = DG.Tweening.Core.DOSetter_float(setFunc)
    ease = ease or DOTWEEN_EASE.Linear
    local DOTween = DG.Tweening.DOTween ---@type DG.Tweening.DOTween
    return DOTween.To(getter, setter, endValue, duration):SetEase(ease):OnComplete(function ()
        if callBack then
            callBack(value)
        end
    end)
end

---世界坐标转化为UI层AnchorPosition
---@param rectParent UnityEngine.RectTransform
---@return Vector2
function Utils.WorldPointToRectTransform(worldP, rectParent)
    local screenP = Camera.main:WorldToScreenPoint(worldP)
    local uiCamera = GetComponent.Canvas(Game.UICanvas).worldCamera
    local hehe, p = RectTransformUtility.ScreenPointToLocalPointInRectangle(rectParent,
            screenP, uiCamera, Vector2.zero)
    return p
end


---获取圆形内随机点
---@param centerPos Vector3 圆心坐标
---@param radius number 半径长度
function Utils.GetCircleRandomPoint(centerPos, radius)
    local r = math.sqrt(math.random(0, math.pow(radius, 2)))
    local angle = math.random(0, 360)
    local pos = Vector2.New(math.cos(angle) * r, math.sin(angle) * r)
    return centerPos + pos
end

---获取矩形内随机点
---@param length number 长
---@param high number 高
function Utils.GetRectRandomPoint(centerPos, length, high)
    local x = math.random(0, length) - (length / 2)
    local y = math.random(0, high) - (high / 2)
    return centerPos + Vector2.New(x, y)
end

---保留几位小数
---@param num number 原数
---@param n number 保留几位
function Happy.keepDecimalNum(num, n)
    if type(num) ~= "number" then
        return num
    end
    n = n or 2
    if num < 0 then
        return -(math.abs(num) - math.abs(num) % 0.1 ^ n)
    else
        return num - num % 0.1 ^ n
    end
end
return Utils